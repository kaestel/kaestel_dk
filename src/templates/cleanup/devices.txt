Mobile setup, next generation ...

Segmentation:
Divide into 4 segments
A) Text-based (no CSS, no JS)
B) Basic css (no floats, no JS, like TDC PLAY)
C) Advanced CSS (broad CSS support, some JS, pre-iPhone phones)
D) Advanced (advanced CSS, DOM, 
JS, webkit-like)

Implementation theory:
A+B) Base implementation is with basic CSS (in external file). If phone has no CSS support text version is automatically the result, and CSS should not be loaded by the phone, so no overload.
Semantic HTML should support graceful fallback for old phones with less than basic css support.

C) As next level phones should have both advanced CSS and some JS support, this version should be able to include extensions via JS. (?)

Extension should be primarily CSS based but since JS is used to include it should be easy to extend JS inclusions dynamically, based on available support, giving this segment unspecified functionality subsegmentation). JS functinality should be limited to navigation enhancements (Ajax and possibly DOM manipulation). 

D) Extension by JS. Push it to the limit.  Extra features can be included by Ajax and DOM manipulation.


Detection:

JavaScript with serverside lookup (php).

Site has JS-detection inclusion in header. A+B will ignore this. C+D will be extended by this. The JS call should reveal the browser header to the webserver, making phone detection possible.  

This way HTML can be served by any CMS. By including JS from our server we solve any technology differences. And we have a product that can be implemented in any CMS tomorrow.

Practical implementation:
Minimum semantic HTML. JS inclusion in head. Init:js classes ... Ie "unit:ajax:[target]" makes element HREF link into Ajax load into target. "init:extend:45" extends container with content_id=45. "init:menu" sets up menu ... Without JS this is ignored.


What about:

* What about pre-HTML phones (WML only)?

* if phones cannot extra-include via JS.

* What if we use this in a regular website. Set a metarefresh default to phone URL, inclusion we detect browser and alter <head>, removing metatag before it is executed. All regular browsers can do this redirecting only poor browsers, that actually needs to be redirected.

Eventually they will serve all content by dynamic extension as it minimizes serverload dramatically :)







Device-ID

#DEVICES

Devices is a simple device-segmentation tool, grouping any kind of devices capable of rendering HTML, be it a desktop computer, your TV set top box or even a screen reader aiding a visually impaired, into manageable segments, allowing you to provide any visitor with an optimized user experience.

Too complicated?

Well, it really is simple - what is complicated is how most people run their websites today.

Maybe you belong to the group of webmasters/developers struggling with desicions ragarding regular website vs mobile website, iPhone/Android/ovi/blackberry app vs webapp, Search engine optimization, validation, complex design requirements, cross-browser support, required support of old browsers due to internal licensing policies, CMS implementation. Do you feel a little bit stuck?

Basically we've been struggling with issues like these since 1997 and Devices has been born to lighten this burden.

Devices divides devices into 9 well-defined segments based on common denominators such as standards support, interaction method and screen size. Logic that allows you to do more with less code.

Why is this smart?
Most device information services out there takes a completely different approach. Well, to put it simply ... They are all clones of WURFL, and in my opinion they've taken the wrong approach. I really have almost no interest in the hardware from a design perspective. I primarily care about the browser.

I see where they are coming from as I've followed the development since 2003. Back then it made more sense. We were delivering ringtones, wallpapers and games to phones that were rarely firmware-updated. We did not have centralized app-stores - we were all trying to be the app-stores. And when it comes to apps (or wallpapers og ringtones) the hardware matters. 

But I'm not competing with the app-stores ... I'm trying to deliver content via the browser in a manner where everyone gets an optimized experience.

Basically WURFL is set off in a different era when mobile-phones sucked. Thus the information they have collected makes no sense in terms of modern mobile-phones. When it comes to the information they have stored its is mostly useless from a frontend development perspective, like does the device support x-HTML level giving a value from -1 to 4. Today, who even cares about x-HTML and furthermore they fail to provide a detailed explanation of the meaning of the different levels, and that is where it turns useless^2. Another example is the "invisible text"-value. I'm guessing no one knows what that means.

Yes, I know they are making an effort to add more relevant info like css3 support, but the info is still weak. Partly because it is still focused about the hardware-device and partly because it is supplied by frontend-rookies.

The trouble with the hardware device approach is that today the firmware/os updates relatively easy and we see giant leaps from one version to the next. In example the browser in Android 2.2 supports transitions in contrast to 2.1, which however supports many other basic css3 features. Many phones can be updated from 2.1 to 2.2 and thus allow for a whole different experience.

And the failure to define criterial criteria regarding CSS/JS support creates more noise than aid. And let's face it ... The people feeding back information to WURFL does not exactly have the thoroughness of quirksmode.

So the problem is that the unsegmented hardware orientated WURFL approach degrades too many users without any good reason. 






The segments:

Desktop
Desktop IE
Desktop light
Tablet
Mobile touch
Mobile
Mobile light
TV
Basic




Hvad er det

Device-ID er en service som muliggør segmentbaseret levering af design og layout til browserbaserede apparater (mobiltelefoner, tablets, PC'ere m.v.), så du kan tilpasse sidens form og funktion og give brugere på forskellige platforme den bedst mulige oplevelse, når de besøger dit website. 

Udover mobiltelefoner rummer Device-ID også information om alle mulige andre systemer og browsere, hvilket gør det velegnet til at understøtte en leveringsstrategi med ét content-lag og mange forskellige design-lag (segmenter).

Hvordan virker det

Device-ID kender mange tusinde forskellige browsere fra telefoner til PC'ere og andre browserbaserede apparater.

Når en bruger besøger dit website, identificeres browseren/apparatet ved hjælp af browserens UserAgent. Dit system sender denne UserAgent til Device-ID, som returnerer segment information. Segment informationen kan, ud over design segment, indeholde specifikke oplysninger om eksempelvis skærmbredde og understøttede video-formater. Denne information anvendes af dit CMS til at levere en optimeret version af websitet til brugerens apparat.

Device-ID er udviklet til brug sammen med Device Segments. Device Segments benytter CSS og JavaScript til at differentiere brugergrænsefladen uden af ændre på leveringen af HTML.

UserAgent databasen

Device-ID tager udgangspunkt i rådata fra open source databasen WURFL, beriget med bl.a. indsamlet data og segmenteringsinformation. Datamodellen er i modsætning til WURFL's specifikt indrettet på designsegmentering af det fulde spektrum af browsere.

Hvis Device-ID ikke allerede kender det pågældende apparat, foretages der et kvalificeret gæt på, hvilket segment browseren tilhører.

Device-ID registrerer alle UserAgents, som systemet ikke allerede kender (fx sjældne eller nye telefoner). Nye UserAgents gennemgås og klassificeres desuden jævnligt, så en "ukendt" bruger kan identificeres med sikkerhed allerede ved sit næste besøg.

Segmenter

Segmenteringen hjælper dig med overblikket til at træffe en beslutning der imødekommer dine brugere bedst muligt i harmoni med omfanget af indsatsen.

Et vist niveau af segmentering er en forudsætning for at udvikle websider, der virker optimalt på eksempelvis mobiltelefoner. Browserne og telefonerne er meget forskellige, og uden segmentering er man ofte nødt til at vælge laveste fællesnævner. Inddelingen i segmenter gør det muligt at dække hele spektret mere detaljeret og give en bedre brugeroplevelse på de nyeste, bedste telefoner, mens der stadig leveres noget brugbart til de gamle modeller. 

Device-ID har overordnet 6 basissegmenter: 0, A, B, C

basic

mobile_light (a+b)

mobile (c)

mobile_touch (d)

tablet

desktop

tv (remote control navigation/ /console/TV)



Segment 0: Rå HTML. Fuldt funktionelt og semantisk. Dette segment vil virke på alle apparater der understøtter HTML rendering. Det vil kun komme i anvendelse på apparater der hverken understøtter CSS eller JavaScript.

Segment A: Mobiltelefoner med dårlig skærmopløsning og dårlig browser. Disse telefoner har ingen eller meget dårlig understøttelse af JavaScript og CSS. Udfordringen er primært at optimere indhold og navigation til den lille skærm.

Segment B: Mobiltelefoner på mellem- til højt niveau. Bedre browsere med fornuftig understøttelse af webstandarder, bedre skærme. Mulighed for CSS- og JavaScript-udvidelser. Segmentet dækker i princippet over alle nyere telefoner uden touchscreen.

Segment C: Touch baserede telefoner med mellemstørrelse display. Eksempelvis iPhone. Designmæssigt vil dette segment adskille sig, ved at implementere et design der er optimeret til finger-navigation.

Segment T: Touch baserede computere eller tablets. Høj skærmopløsning (1024+) og touchscreen. Eksempelvis iPad.

Segment W: Traditionelle PC browsere, som Firefox, Safari og Internet Explorer. Det segment der typisk understøttes af almindelige websites.

Hvert segment har sine muligheder og begrænsninger - både teknisk og brugsmæssigt. Segmenteringsmodellen er designet med henblik på at optimere både funktion og design til det enkelte apparat, og den giver dig et let overblik over de tekniske begrænsninger og hvordan siden navigeres (finger, mus, keypad m.v.).

Den overordnede segmentering kan detaljeres ud i undersegmenter, der kan bruges til at ramme helt specifikke apparat-grupper. Eksempelvis findes der et A-IE segment der kan bruges til at tilpasse leveringen til IE versioner, der er så dårlige at de ender i segment A. Eksempelvis IEMobile 7, som slet ikke er god nok til segment B, men alligevel kan lidt mere end segment A generelt.

Segmentmodellen udvides løbende med undersegmenter, som du kan bruge til at målrette præsentationen af dit indhold til.

Udvikling til segmenter

Når du udvikler websider til de forskellige segmenter, står det dig frit for at bruge dem som det passer dig. Du kan lave en detaljeret version til hvert segment eller du kan vælge at udvikle én touch-version (til segment C og T) og én fallback-version hvor du slår segment A og B sammen. Du kan også vælge at lave en version målrettet et specifikt undersegment, hvis mange af dine brugere har en bestemt telefon.

Vi anbefaler at du bruger Device Segments som implementerings metode. Device Segments giver dig en CSS og JavaScript struktur, der gør det let at lave segment-udvikling. Grænsefladeudvidelser håndteres via JavaScript injection, hvorved den fulde HTML-kontrol bevares i hænderne på designer og frontend programmør. Udviklerne skal blot levere den minimale, semantiske HTML og overhovedet ikke bekymre sig om præsentation.

Implementering

Device-ID medfører et ekstra kald og et par millisekunders ekstra ventetid, når brugeren besøger dit website og skal identificeres. Derfor bør du kun lave kaldet ved brugerens første sidevisning. Svaret fra Device-ID kan herefter gemmes i brugerens session. Det giver envidere den fordel, at brugeren let kan tillades at vælge et andet segment manuelt, uden at dette ændres på hvert sideload.

På baggrund af svaret kan indholdet tilpasses efter den aftalte segment model.

Bruges Device-ID sammen med Device Segments laves alle design-justeringer direkte i CSS og JavaScript, hvilket giver fuld fleksibilitet i forbindelse med design implementering, uden af udviklere skal introduceres i processen. Samtidig kan alle udviklingstiltag bruges på tværs af segmenter.

Tekniske detaljer

I praksis kan kaldet til Device-ID udføres på antal forskellige måder. Eksempelvis via SOAP, GET/POST, JSONP eller bare JavaScript.

Kaldet til Device-ID skal sende en UserAgent med, og på baggrund af denne returneres detaljer. Kan apparatet ikke identificeres, vil detaljer på et tilsvarende apparat returneres om muligt. Kan apparatet slet ikke identificeres returneres det aftalte default segment, mens den pågældende UserAgent annonceres til manuel identifikation i systemet.

Det anbefales at svaret fra Device-ID gemmes i brugerens session, så det kun er nødvendigt at lave én forespørsel for hvert unikt besøg.

På baggrund af svaret kan leveringen tilpasses, så der leveres det korrekte CSS og JavaScript, billeder i de rigtige størrelser og om nødvendigt tilpasset HTML.

Det anbefales at Device-ID bruges sammen med Device Segments, og at HTML holdes konsistent på tværs af segmenter. Device Segments arbejder med semantisk, valideret HTML og et separat designlag for hvert segment.

Pseudo Eksempler


SOAP:

Request: 
<browser>
    <useragent>Mozilla</useragent>
</browser>

Response: 
<browser>
    <segment>seg_w</segment>
    <display_width>320</display_width>
</browser>


Request: 
<browser>
    <useragent>Mozilla</useragent>
    <drm></drm>
    <optional_attribute></optional_attribute>
</browser>

Response: 
<browser>
    <video>rtsf</video>
    <drm>fairplay</drm>
    <optional_attribute>value</optional_attribute>
</browser>


GET:

Request:
?useragent=Mozilla

Response:
segment=seg_w&display_width=320&video=rtsf


Redirect:

Request:
?useragent=Mozilla&returnurl=return_answer_to_this_url&method=post

Response:
Posts to "return_answer_to_this_url": 
segment=seg_w
display_width=320
video=rtsf


JSONP

Request:
?useragent=Mozilla

Response:


JavaScript

Request: 
?useragent=Mozilla

Response:
browser = new Array();
browser["segment"] = "seg_w";
browser["display_width"] = 320;
browser["video"] = "rtsf";


Platforme:

mobile_light
mobile
mobile_touch
tablet
desktop

OS':

Android ?
Iphone OS?
Windows Mobile?

Windows pre vista/XP/Vista/7
Mac OS 9-/10?


Browsere:

Firefox 1/2/3/3.5
Safari 1/2/3/4
IE 5/5.5/6/7/8

IE Mobile ?
Netfront?
Openwave?



Mobile

* html5/b (finish feedback, add HTML 5 element)
* get location (gps/gsm)
* get device MSISDN (soap + url + js)
* get device data (soap + url + js)
* horisontal-slide - galleri/sideskift
* vertical slide - layover princip til eksempelvis login
* swipe - side navigation - frem og tilbage


HTML5 test

html 5/a - only doctype (no elements)

Image/html 5 issues:

iphone (wurfl: 300 - for smal) (rendering: for smal - wurfl fejl) (html5/a: ok)

Nokia N78 (wurfl: 240) (rendering: for bred ? scrollbar) (html5/a: ok)
Nokia 6730 (wurfl: 240) (rendering: 224, ok) (html5/a: ok)
Nokia 6267  (wurfl: 240) (rendering: 224, ok) (html5/a: ok)

htc diamond touch opera (wurfl: 480) (rendering: alt for bred - wurfl fejl) (html5/a: FEJL???)
htc diamond touch ie (wurfl: 480) (rendering: ok ? CSS?) (html5/a: ok)

htc diamond ie (wurfl: 240) (rendering: 224, ok) (html5/a: ok)

Se w302 (wurfl: 176) (rendering: 150, ok) (html5/a: ok)
Se w595 (wurfl: 240) (rendering: 224, ok) (html5/a: ok)
