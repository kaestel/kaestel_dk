Markup should be 

- validated (AAA, WAI, etc)
- lightweight
- backwards compatible
- design independent
- semantic
- search engine optimized

- easy to implement
- no inline JavaScript
- no inline CSS




Ideally one would always write HTML that meets all the requirements listed about - but is that even worth considering? If you are a frontend developer you already know this is not an easily achieved goal. 

Let me briefly try to explain why I would make an effort, regardless of the challenges.

Validated
If your HTML validates to the standards provided by W3C your are certain to provide the best basis for rendering-engines across the browser spectrum, when some browsers are more reluctant to accept errors than others. It also works as a compatibility safety-net as the chosen doctypes comes with clear specifications as to how future browsers should interpret your markup. And it gives you a good basis for debugging.
Usability validation secures semantic details which can be essential to visually impaired users or otherwise unusual users. If you build your site right, blind people can use it too.

Lightweight
You don't want your users to wait and the lighter the markup the faster it loads and renders. Light markup also means simple markup, and simple markup is easier to understand, debug and implement in you backend/CMS solution.

Backwards compatibility
Users comes in many flavors. Some update their browser every month others haven't done so in years. Some can't update due to hardware or system limitations, others due to lack of skills. Preferably all users can use your site with satisfactory result, regardless of their hard- and software.
So you want to keep it simple, yet advanced enough to satisfy the award-hungry designer who just sent you a 600mb .psd with the site layout.

Design independent
We all know that fashion is indecisive. So is webdesign and what looks cool now will probably look worn in a couple of years. You might as well expect the need for a design-update a few years from now. And wouldn't it be nice if you could apply a new design without changing the markup. It sure would save a lot of money if you were able to write markup to could have any kind of design applied to it.

Semantic
Semantic markup represents to content and the structure hereof - not the design. Your content should also work without the current design, which might fail on some devices. Also semantics makes the markup easier to read, by other programmers, screen readers or search engines. Search engines and screen readers are just machines (or rather, programs) ... They don't interpret your design, just your content, so you want to use microformats, microdata or other ways of enriching you markup to ensure perfect interpretation.

Search engine optimized
I guess there is no real need to explain. By far the most websites are being built with the intent of being visited. The more, the merrier. And unless you are in an isolated ecosystem with no wish for additional attention or just plain ignorant, you want to please the search engines. Search engines lives by the quality of the search results they provide and you can help them, by limiting the markup they have to index and make sure it can be understood by a machine.

Easy to implement
When you markup is easy to implement less errors occur during implementation

No inline js

No inline CSS


 






Only using content-related, optimized graphics in your markup, 